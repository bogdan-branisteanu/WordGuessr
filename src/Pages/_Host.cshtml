@page "/"
@namespace src.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = "_Layout";
}

<component type="typeof(App)" render-mode="ServerPrerendered" />
<script src='https://kit.fontawesome.com/a076d05399.js' crossorigin='anonymous'>
<script src="_content/Radzen.Blazor/Radzen.Blazor.js"></script>

//custom scripts start
<script>
        function GiveAlert(numLetters, row, tiles) {
          console.log("row:" + row);
            for(var i = 1; i <= numLetters; i++)
            {
                
                var id = row*10 + i;
                console.log(id);
                document.getElementById(id.toString()).style.backgroundColor = "#dc7562";
                document.getElementById("#"+id.toString()).classList.add("incorrect");
            }

            var shakingElements = [];

            var shake = function (element, magnitude = 1, angular = false) {
            //First set the initial tilt angle to the right (+1) 
            var tiltAngle = 1;

            //A counter to count the number of shakes
            var counter = 1;

            //The total number of shakes (there will be 1 shake per frame)
            var numberOfShakes = 15;

            //Capture the element's position and angle so you can
            //restore them after the shaking has finished
            var startX = 0,
                startY = 0,
                startAngle = 0;

            // Divide the magnitude into 10 units so that you can 
            // reduce the amount of shake by 10 percent each frame
            var magnitudeUnit = magnitude / numberOfShakes;

            //The `randomInt` helper function
            var randomInt = (min, max) => {
              return Math.floor(Math.random() * (max - min + 1)) + min;
            };

            //Add the element to the `shakingElements` array if it
            //isn't already there
            if(shakingElements.indexOf(element) === -1) {
              //console.log("added")
              shakingElements.push(element);

              //Add an `updateShake` method to the element.
              //The `updateShake` method will be called each frame
              //in the game loop. The shake effect type can be either
              //up and down (x/y shaking) or angular (rotational shaking).
              if(angular) {
                angularShake();
              } else {
                upAndDownShake();
              }
            }

            //The `upAndDownShake` function
            function upAndDownShake() {

              //Shake the element while the `counter` is less than 
              //the `numberOfShakes`
              if (counter < numberOfShakes) {

                //Reset the element's position at the start of each shake
                element.style.transform = 'translate(' + startX + 'px, ' + startY + 'px)';

                //Reduce the magnitude
                magnitude -= magnitudeUnit;

                //Randomly change the element's position
                var randomX = randomInt(-magnitude, magnitude);
                var randomY = randomInt(-magnitude, magnitude);

                element.style.transform = 'translate(' + randomX + 'px, ' + randomY + 'px)';

                //Add 1 to the counter
                counter += 1;

                requestAnimationFrame(upAndDownShake);
              }

              //When the shaking is finished, restore the element to its original 
              //position and remove it from the `shakingElements` array
              if (counter >= numberOfShakes) {
                element.style.transform = 'translate(' + startX + ', ' + startY + ')';
                shakingElements.splice(shakingElements.indexOf(element), 1);
              }
            }

            //The `angularShake` function
            function angularShake() {
              if (counter < numberOfShakes) {
              
                //Reset the element's rotation
                element.style.transform = 'rotate(' + startAngle + 'deg)';

                //Reduce the magnitude
                magnitude -= magnitudeUnit;

                //Rotate the element left or right, depending on the direction,
                //by an amount in radians that matches the magnitude
                var angle = Number(magnitude * tiltAngle).toFixed(2);
                
                element.style.transform = 'rotate(' + angle + 'deg)';
                counter += 1;

                //Reverse the tilt angle so that the element is tilted
                //in the opposite direction for the next shake
                tiltAngle *= -1;

                requestAnimationFrame(angularShake);
              }

              //When the shaking is finished, reset the element's angle and
              //remove it from the `shakingElements` array
              if (counter >= numberOfShakes) {
                element.style.transform = 'rotate(' + startAngle + 'deg)';
                shakingElements.splice(shakingElements.indexOf(element), 1);
                //console.log("removed")
              }
            }

          };


          var elements = document.getElementsByClassName("incorrect");

          for (var i = 0; i < elements.length; i++) {
              shake(elements.item(i), 7, true);
          }


            setTimeout(() => {
                for(var i = 1; i <= numLetters; i++)
                {
                    
                    var id = row*10 + i;
                    document.getElementById(id.toString()).style.backgroundColor = "#333";
                    document.getElementById("#" + id.toString()).classList.remove("incorrect");
                }
            }, 500);
        }
</script>


<script>
        // When the user clicks the button, the page scrolls to the top
        function OnScrollEvent() {
            document.documentElement.scrollTop = 0;
        }
</script>

<script> 
    window.getWindowDimensions = function () {
        return {   
            width: window.innerWidth,
            height: window.innerHeight
        };
    }; 
</script>


<script>

  function shakeFunction(){
  var shakingElements = [];

  var shake = function (element, magnitude = 1, angular = false) {
  //First set the initial tilt angle to the right (+1) 
      var tiltAngle = 1;

      //A counter to count the number of shakes
      var counter = 1;

      //The total number of shakes (there will be 1 shake per frame)
      var numberOfShakes = 15;

      //Capture the element's position and angle so you can
      //restore them after the shaking has finished
      var startX = 0,
          startY = 0,
          startAngle = 0;

      // Divide the magnitude into 10 units so that you can 
      // reduce the amount of shake by 10 percent each frame
      var magnitudeUnit = magnitude / numberOfShakes;

    //The `randomInt` helper function
      var randomInt = (min, max) => {
        return Math.floor(Math.random() * (max - min + 1)) + min;
      };

  //Add the element to the `shakingElements` array if it
  //isn't already there
      if(shakingElements.indexOf(element) === -1) {
        //console.log("added")
        shakingElements.push(element);

        //Add an `updateShake` method to the element.
        //The `updateShake` method will be called each frame
        //in the game loop. The shake effect type can be either
        //up and down (x/y shaking) or angular (rotational shaking).
        if(angular) {
          angularShake();
        } else {
          upAndDownShake();
        }
      }

  //The `upAndDownShake` function
      function upAndDownShake() {

        //Shake the element while the `counter` is less than 
        //the `numberOfShakes`
        if (counter < numberOfShakes) {

          //Reset the element's position at the start of each shake
          element.style.transform = 'translate(' + startX + 'px, ' + startY + 'px)';

          //Reduce the magnitude
          magnitude -= magnitudeUnit;

          //Randomly change the element's position
          var randomX = randomInt(-magnitude, magnitude);
          var randomY = randomInt(-magnitude, magnitude);

          element.style.transform = 'translate(' + randomX + 'px, ' + randomY + 'px)';

          //Add 1 to the counter
          counter += 1;

          requestAnimationFrame(upAndDownShake);
        }

        //When the shaking is finished, restore the element to its original 
        //position and remove it from the `shakingElements` array
          if (counter >= numberOfShakes) {
            element.style.transform = 'translate(' + startX + ', ' + startY + ')';
            shakingElements.splice(shakingElements.indexOf(element), 1);
          }
      }

      //The `angularShake` function
      function angularShake() {
        if (counter < numberOfShakes) {
        
          //Reset the element's rotation
          element.style.transform = 'rotate(' + startAngle + 'deg)';

          //Reduce the magnitude
          magnitude -= magnitudeUnit;

          //Rotate the element left or right, depending on the direction,
          //by an amount in radians that matches the magnitude
          var angle = Number(magnitude * tiltAngle).toFixed(2);
          
          element.style.transform = 'rotate(' + angle + 'deg)';
          counter += 1;

          //Reverse the tilt angle so that the element is tilted
          //in the opposite direction for the next shake
          tiltAngle *= -1;

          requestAnimationFrame(angularShake);
        }

        //When the shaking is finished, reset the element's angle and
        //remove it from the `shakingElements` array
        if (counter >= numberOfShakes) {
          element.style.transform = 'rotate(' + startAngle + 'deg)';
          shakingElements.splice(shakingElements.indexOf(element), 1);
          //console.log("removed")
        }
      }

  };


    var elements = document.getElementsByClassName("incorrect");

    for (var i = 0; i < elements.length; i++) {
        shake(elements.item(i), 7, true);
    }
}
</script>
//custom scripts end

<link rel="stylesheet" href="_content/Radzen.Blazor/css/default-base.css">
<link href="_content/Blazored.Modal/blazored-modal.css" rel="stylesheet" />
<script src="_content/Blazored.Modal/blazored.modal.js"></script>



